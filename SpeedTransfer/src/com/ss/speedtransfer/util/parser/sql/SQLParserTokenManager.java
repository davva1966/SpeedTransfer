/* Generated By:JavaCC: Do not edit this line. SQLParserTokenManager.java */
// {{CopyrightNotice}}

package com.ss.speedtransfer.util.parser.sql;

public class SQLParserTokenManager implements SQLParserConstants {
	public java.io.PrintStream debugStream = System.out;

	public void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	private final int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	private final int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
		case 9:
			jjmatchedKind = 2;
			return jjMoveNfa_0(5, 0);
		case 10:
			jjmatchedKind = 3;
			return jjMoveNfa_0(5, 0);
		case 13:
			jjmatchedKind = 4;
			return jjMoveNfa_0(5, 0);
		case 32:
			jjmatchedKind = 1;
			return jjMoveNfa_0(5, 0);
		case 40:
			jjmatchedKind = 237;
			return jjMoveNfa_0(5, 0);
		case 41:
			jjmatchedKind = 238;
			return jjMoveNfa_0(5, 0);
		case 42:
			jjmatchedKind = 7;
			return jjMoveNfa_0(5, 0);
		case 43:
			jjmatchedKind = 16;
			return jjMoveNfa_0(5, 0);
		case 44:
			jjmatchedKind = 236;
			return jjMoveNfa_0(5, 0);
		case 45:
			jjmatchedKind = 17;
			return jjMoveNfa_0(5, 0);
		case 47:
			jjmatchedKind = 15;
			return jjMoveNfa_0(5, 0);
		case 59:
			jjmatchedKind = 233;
			return jjMoveNfa_0(5, 0);
		case 60:
			jjmatchedKind = 11;
			return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L, 0x0L, 0x0L);
		case 61:
			jjmatchedKind = 8;
			return jjMoveStringLiteralDfa1_0(0x200L, 0x0L, 0x0L, 0x0L);
		case 62:
			jjmatchedKind = 10;
			return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L, 0x0L, 0x0L);
		case 63:
			jjmatchedKind = 230;
			return jjMoveNfa_0(5, 0);
		case 65:
		case 97:
			return jjMoveStringLiteralDfa1_0(0x4c20000001000000L, 0x4000800002400002L, 0x0L, 0x80100L);
		case 66:
		case 98:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000040L, 0x2482200000000002L, 0x0L);
		case 67:
		case 99:
			return jjMoveStringLiteralDfa1_0(0x80100c8000000L, 0x100000a0c1040020L, 0x5082010400040L, 0x1e000L);
		case 68:
		case 100:
			return jjMoveStringLiteralDfa1_0(0x4810400000L, 0x400L, 0x1110000020030008L, 0x0L);
		case 69:
		case 101:
			return jjMoveStringLiteralDfa1_0(0x100000000L, 0x90000000000010L, 0x20L, 0x0L);
		case 70:
		case 102:
			return jjMoveStringLiteralDfa1_0(0x20c0000000000L, 0x104L, 0x40100100000200L, 0x0L);
		case 71:
		case 103:
			return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x1040000000000L, 0x1000004000L, 0x0L);
		case 72:
		case 104:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000000L, 0x0L, 0x0L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa1_0(0x90000020000000L, 0x20001800000800L, 0x8000420c05900000L, 0x200000L);
		case 74:
		case 106:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x201000L, 0x0L, 0x10L);
		case 75:
		case 107:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000000L, 0x0L);
		case 76:
		case 108:
			return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x8000000400088200L, 0x80000L, 0x20060L);
		case 77:
		case 109:
			return jjMoveStringLiteralDfa1_0(0x0L, 0xc000000L, 0x180L, 0x0L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa1_0(0x200100000100000L, 0x100001L, 0x800040000000001L, 0x400000L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa1_0(0x8040020400000000L, 0x4004000000000L, 0x8000L, 0x100000L);
		case 80:
		case 112:
			return jjMoveStringLiteralDfa1_0(0x202000000000L, 0x8000000000000L, 0x4088201000L, 0x0L);
		case 82:
		case 114:
			return jjMoveStringLiteralDfa1_0(0x200000000L, 0x2002100100000008L, 0x800040000800L, 0x40e00L);
		case 83:
		case 115:
			return jjMoveStringLiteralDfa1_0(0x1001009002800000L, 0x40000010800080L, 0x200008000000400L, 0x1002L);
		case 84:
		case 116:
			return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x200002000L, 0x4028010002042004L, 0x88L);
		case 85:
		case 117:
			return jjMoveStringLiteralDfa1_0(0x2000000004000000L, 0x8004b0000020000L, 0x0L, 0x0L);
		case 86:
		case 118:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000004000L, 0x10L, 0x5L);
		case 87:
		case 119:
			return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x20010000L, 0x0L, 0xc0000000000L);
		case 124:
			return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L, 0x0L, 0x0L);
		default:
			return jjMoveNfa_0(5, 0);
		}
	}

	private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 0);
		}
		switch (curChar) {
		case 61:
			if ((active0 & 0x200L) != 0L) {
				jjmatchedKind = 9;
				jjmatchedPos = 1;
			} else if ((active0 & 0x1000L) != 0L) {
				jjmatchedKind = 12;
				jjmatchedPos = 1;
			} else if ((active0 & 0x2000L) != 0L) {
				jjmatchedKind = 13;
				jjmatchedPos = 1;
			}
			break;
		case 65:
		case 97:
			return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0x600000284340030L, active2, 0x10080000081151L, active3, 0x2015L);
		case 67:
		case 99:
			return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0x4040800000000000L, active2, 0L, active3, 0L);
		case 68:
		case 100:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L, active2, 0x20000000000L, active3, 0L);
		case 69:
		case 101:
			return jjMoveStringLiteralDfa2_0(active0, 0x1000144812000000L, active1, 0xa002300000000601L, active2, 0x1008818262010c0aL, active3, 0x41e00L);
		case 70:
		case 102:
			if ((active0 & 0x80000000000000L) != 0L) {
				jjmatchedKind = 55;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000L, active2, 0L, active3, 0L);
		case 71:
		case 103:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000000000L, active2, 0L, active3, 0L);
		case 72:
		case 104:
			return jjMoveStringLiteralDfa2_0(active0, 0x801000800000L, active1, 0x8020000000L, active2, 0x4000000400000L, active3, 0L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0x508014000L, active2, 0x44a0200000020080L, active3, 0xc0000020008L);
		case 76:
		case 108:
			return jjMoveStringLiteralDfa2_0(active0, 0x8408000001000000L, active1, 0L, active2, 0x43000000000000L, active3, 0L);
		case 77:
		case 109:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x800000L, active3, 0x2L);
		case 78:
		case 110:
			if ((active0 & 0x40000000000000L) != 0L) {
				jjmatchedKind = 54;
				jjmatchedPos = 1;
			} else if ((active3 & 0x200000L) != 0L) {
				jjmatchedKind = 213;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x800000020000000L, active1, 0x800421800000800L, active2, 0x8000400c05100000L, active3, 0x80000L);
		case 79:
		case 111:
			if ((active0 & 0x100000000000000L) != 0L) {
				jjmatchedKind = 56;
				jjmatchedPos = 1;
			} else if ((active0 & 0x200000000000000L) != 0L) {
				jjmatchedKind = 57;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x60002c0000000L, active1, 0x10000000010890ccL, active2, 0x2100042110040000L, active3, 0x400060L);
		case 80:
		case 112:
			return jjMoveStringLiteralDfa2_0(active0, 0x20404000000L, active1, 0x4000000000000L, active2, 0L, active3, 0L);
		case 81:
		case 113:
			return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L, active2, 0L, active3, 0L);
		case 82:
		case 114:
			if ((active3 & 0x100000L) != 0L) {
				jjmatchedKind = 212;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x202008400000L, active1, 0x1042000002100L, active2, 0x508820e004L, active3, 0x80L);
		case 83:
		case 115:
			if ((active0 & 0x10000000000000L) != 0L) {
				jjmatchedKind = 52;
				jjmatchedPos = 1;
			} else if ((active0 & 0x20000000000000L) != 0L) {
				jjmatchedKind = 53;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x6000000000000000L, active1, 0x90000020000L, active2, 0L, active3, 0L);
		case 84:
		case 116:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000L, active2, 0x200000000000000L, active3, 0L);
		case 85:
		case 117:
			return jjMoveStringLiteralDfa2_0(active0, 0x10000100000L, active1, 0x8004010000000L, active2, 0x800100000000200L, active3, 0x1c100L);
		case 86:
		case 118:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000L, active2, 0L, active3, 0L);
		case 88:
		case 120:
			return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0x90000000000000L, active2, 0x20L, active3, 0L);
		case 89:
		case 121:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L, active2, 0L, active3, 0L);
		case 124:
			if ((active0 & 0x40000L) != 0L) {
				jjmatchedKind = 18;
				jjmatchedPos = 1;
			}
			break;
		default:
			break;
		}
		return jjMoveNfa_0(5, 1);
	}

	private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3) {
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 1);
		}
		switch (curChar) {
		case 95:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40000000000L, active3, 0L);
		case 65:
		case 97:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000c0000800000L, active2, 0x4800000402000L, active3, 0x682L);
		case 66:
		case 98:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000200000000L, active2, 0L, active3, 0L);
		case 67:
		case 99:
			if ((active0 & 0x4000000000000000L) != 0L) {
				jjmatchedKind = 62;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0x40100000c0008010L, active2, 0x1000008000100000L, active3, 0L);
		case 68:
		case 100:
			if ((active0 & 0x8000000000000000L) != 0L) {
				jjmatchedKind = 63;
				jjmatchedPos = 2;
			} else if ((active1 & 0x2L) != 0L) {
				jjmatchedKind = 65;
				jjmatchedPos = 2;
			} else if ((active3 & 0x80000L) != 0L) {
				jjmatchedKind = 211;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0x1000000000L, active2, 0xc00008000L, active3, 0L);
		case 69:
		case 101:
			if ((active0 & 0x2000000000000000L) != 0L) {
				jjmatchedKind = 61;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x822008000000L, active1, 0x8020024000L, active2, 0x20000000020L, active3, 0L);
		case 70:
		case 102:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000200L, active2, 0x60010008L, active3, 0L);
		case 71:
		case 103:
			if ((active1 & 0x2000000L) != 0L) {
				jjmatchedKind = 89;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000L, active2, 0x80000000000000L, active3, 0x40000L);
		case 72:
		case 104:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0x880030000003000L, active2, 0x4089000004L, active3, 0L);
		case 75:
		case 107:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000L);
		case 76:
		case 108:
			if ((active0 & 0x400000000000000L) != 0L) {
				jjmatchedKind = 58;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x1000212100000L, active1, 0x1200400000000020L, active2, 0x102000000040L, active3, 0L);
		case 77:
		case 109:
			if ((active1 & 0x10000000L) != 0L) {
				jjmatchedKind = 92;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0xc0000000L, active1, 0x400100080L, active2, 0x820000002800000L, active3, 0x8L);
		case 78:
		case 110:
			if ((active1 & 0x8000000L) != 0L) {
				jjmatchedKind = 91;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000800080000L, active2, 0x4400080010080280L, active3, 0x60L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa3_0(active0, 0x8000000c00000L, active1, 0x1002000000100L, active2, 0x2043001000204000L, active3, 0L);
		case 80:
		case 112:
			if ((active2 & 0x40000L) != 0L) {
				jjmatchedKind = 146;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L, active2, 0L, active3, 0x800L);
		case 81:
		case 113:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L);
		case 82:
		case 114:
			if ((active1 & 0x4L) != 0L) {
				jjmatchedKind = 66;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x98000000000L, active1, 0L, active2, 0x200010100000010L, active3, 0x1d005L);
		case 83:
		case 115:
			return jjMoveStringLiteralDfa3_0(active0, 0x400820000000L, active1, 0x40400L, active2, 0x21800L, active3, 0x2000L);
		case 84:
		case 116:
			if ((active0 & 0x1000000000000000L) != 0L) {
				jjmatchedKind = 60;
				jjmatchedPos = 2;
			} else if ((active2 & 0x200000000000L) != 0L) {
				jjmatchedKind = 173;
				jjmatchedPos = 2;
			} else if ((active2 & 0x400000000000L) != 0L) {
				jjmatchedKind = 174;
				jjmatchedPos = 2;
			} else if ((active3 & 0x400000L) != 0L) {
				jjmatchedKind = 214;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x4040401000000L, active1, 0x2004904000410840L, active2, 0x8010000004000003L, active3, 0xc0000000100L);
		case 85:
		case 117:
			return jjMoveStringLiteralDfa3_0(active0, 0x2001000000000L, active1, 0x1000000L, active2, 0x100000000000000L, active3, 0L);
		case 86:
		case 118:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x402000000200000L, active2, 0L, active3, 0x10L);
		case 87:
		case 119:
			if ((active1 & 0x1L) != 0L) {
				jjmatchedKind = 64;
				jjmatchedPos = 2;
			} else if ((active1 & 0x8L) != 0L) {
				jjmatchedKind = 67;
				jjmatchedPos = 2;
			}
			break;
		case 88:
		case 120:
			if ((active1 & 0x4000000L) != 0L) {
				jjmatchedKind = 90;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0L, active2, 0x8000000000100L, active3, 0L);
		case 89:
		case 121:
			if ((active0 & 0x800000000000000L) != 0L) {
				jjmatchedKind = 59;
				jjmatchedPos = 2;
			} else if ((active2 & 0x200000000L) != 0L) {
				jjmatchedKind = 161;
				jjmatchedPos = 2;
			}
			break;
		default:
			break;
		}
		return jjMoveNfa_0(5, 2);
	}

	private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3) {
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 2);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 2);
		}
		switch (curChar) {
		case 65:
		case 97:
			if ((active1 & 0x200000L) != 0L) {
				jjmatchedKind = 85;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0xc000000L, active1, 0L, active2, 0x440000000000008L, active3, 0x10L);
		case 66:
		case 98:
			if ((active2 & 0x1000000000000L) != 0L) {
				jjmatchedKind = 176;
				jjmatchedPos = 3;
			} else if ((active2 & 0x2000000000000L) != 0L) {
				jjmatchedKind = 177;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x100000000000000L, active3, 0x4L);
		case 67:
		case 99:
			if ((active1 & 0x400L) != 0L) {
				jjmatchedKind = 74;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x40800000000L, active1, 0x8000000000L, active2, 0x200220L, active3, 0x2001L);
		case 68:
		case 100:
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x40000000000L, active3, 0x600L);
		case 69:
		case 101:
			if ((active1 & 0x80L) != 0L) {
				jjmatchedKind = 71;
				jjmatchedPos = 3;
			} else if ((active1 & 0x100000L) != 0L) {
				jjmatchedKind = 84;
				jjmatchedPos = 3;
			} else if ((active2 & 0x10000000000000L) != 0L) {
				jjmatchedKind = 180;
				jjmatchedPos = 3;
			} else if ((active2 & 0x20000000000000L) != 0L) {
				jjmatchedKind = 181;
				jjmatchedPos = 3;
			} else if ((active3 & 0x20000L) != 0L) {
				jjmatchedKind = 209;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x1000033000000L, active1, 0x50005800400000L, active2, 0x8800000d64818000L, active3, 0x40808L);
		case 71:
		case 103:
			if ((active1 & 0x80000L) != 0L) {
				jjmatchedKind = 83;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000000L, active2, 0x80004L, active3, 0x60L);
		case 72:
		case 104:
			if ((active1 & 0x10L) != 0L) {
				jjmatchedKind = 68;
				jjmatchedPos = 3;
			} else if ((active1 & 0x40L) != 0L) {
				jjmatchedKind = 70;
				jjmatchedPos = 3;
			} else if ((active1 & 0x10000L) != 0L) {
				jjmatchedKind = 80;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x180000000L, active2, 0L, active3, 0xc0000000000L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0x404800400000000L, active2, 0x1280000000002000L, active3, 0x1000L);
		case 75:
		case 107:
			if ((active1 & 0x8000L) != 0L) {
				jjmatchedKind = 79;
				jjmatchedPos = 3;
			}
			break;
		case 76:
		case 108:
			if ((active0 & 0x100000L) != 0L) {
				jjmatchedKind = 20;
				jjmatchedPos = 3;
			} else if ((active1 & 0x20L) != 0L) {
				jjmatchedKind = 69;
				jjmatchedPos = 3;
			} else if ((active2 & 0x800000000000L) != 0L) {
				jjmatchedKind = 175;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x4300000000L, active1, 0x8000240000000L, active2, 0x2000102000000040L, active3, 0x2L);
		case 77:
		case 109:
			if ((active1 & 0x100L) != 0L) {
				jjmatchedKind = 72;
				jjmatchedPos = 3;
			} else if ((active1 & 0x2000L) != 0L) {
				jjmatchedKind = 77;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0L, active2, 0x4080000000L, active3, 0L);
		case 78:
		case 110:
			if ((active0 & 0x20000000000L) != 0L) {
				jjmatchedKind = 41;
				jjmatchedPos = 3;
			} else if ((active1 & 0x1000L) != 0L) {
				jjmatchedKind = 76;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x2800000000000L, active1, 0x50001000000L, active2, 0x20000000000L, active3, 0x80L);
		case 79:
		case 111:
			if ((active0 & 0x4000000000000L) != 0L) {
				jjmatchedKind = 50;
				jjmatchedPos = 3;
			} else if ((active1 & 0x800L) != 0L) {
				jjmatchedKind = 75;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x208000000000L, active1, 0x4022620000000000L, active2, 0x88000000000L, active3, 0x100L);
		case 80:
		case 112:
			if ((active0 & 0x400000L) != 0L) {
				jjmatchedKind = 22;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x2080000000L, active1, 0L, active2, 0x2000000L, active3, 0L);
		case 81:
		case 113:
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000000000L, active2, 0L, active3, 0L);
		case 82:
		case 114:
			if ((active1 & 0x20000L) != 0L) {
				jjmatchedKind = 81;
				jjmatchedPos = 3;
			} else if ((active2 & 0x4000000000000L) != 0L) {
				jjmatchedKind = 178;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20800000L, active2, 0x500000L, active3, 0x1c000L);
		case 83:
		case 115:
			return jjMoveStringLiteralDfa4_0(active0, 0x8090000000000L, active1, 0x80002000000000L, active2, 0x10001000L, active3, 0L);
		case 84:
		case 116:
			if ((active0 & 0x100000000000L) != 0L) {
				jjmatchedKind = 44;
				jjmatchedPos = 3;
			} else if ((active0 & 0x400000000000L) != 0L) {
				jjmatchedKind = 46;
				jjmatchedPos = 3;
			} else if ((active1 & 0x200L) != 0L) {
				jjmatchedKind = 73;
				jjmatchedPos = 3;
			} else if ((active1 & 0x40000L) != 0L) {
				jjmatchedKind = 82;
				jjmatchedPos = 3;
			} else if ((active2 & 0x8000000000000L) != 0L) {
				jjmatchedKind = 179;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L, active2, 0x10001020800L, active3, 0L);
		case 85:
		case 117:
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3201100000000000L, active2, 0x1000004401L, active3, 0L);
		case 86:
		case 118:
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x8000180L, active3, 0L);
		case 87:
		case 119:
			if ((active0 & 0x800000L) != 0L) {
				jjmatchedKind = 23;
				jjmatchedPos = 3;
			} else if ((active1 & 0x4000L) != 0L) {
				jjmatchedKind = 78;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2L, active3, 0L);
		case 89:
		case 121:
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x4000000000000010L, active3, 0L);
		default:
			break;
		}
		return jjMoveNfa_0(5, 3);
	}

	private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3) {
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 3);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 3);
		}
		switch (curChar) {
		case 32:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc0000000700L);
		case 95:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x100000000000L, active3, 0x10L);
		case 65:
		case 97:
			return jjMoveStringLiteralDfa5_0(active0, 0x6180000000L, active1, 0L, active2, 0x6080400180L, active3, 0x3800L);
		case 66:
		case 98:
			return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L, active2, 0x40L, active3, 0L);
		case 67:
		case 99:
			return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0x400000000000L, active2, 0L, active3, 0L);
		case 68:
		case 100:
			if ((active0 & 0x2000000000000L) != 0L) {
				jjmatchedKind = 49;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L, active2, 0x800000L, active3, 0L);
		case 69:
		case 101:
			if ((active0 & 0x8000000000000L) != 0L) {
				jjmatchedKind = 51;
				jjmatchedPos = 4;
			} else if ((active1 & 0x20000000L) != 0L) {
				jjmatchedKind = 93;
				jjmatchedPos = 4;
			} else if ((active1 & 0x40000000L) != 0L) {
				jjmatchedKind = 94;
				jjmatchedPos = 4;
			} else if ((active1 & 0x80000000L) != 0L) {
				jjmatchedKind = 95;
				jjmatchedPos = 4;
			} else if ((active1 & 0x200000000L) != 0L) {
				jjmatchedKind = 97;
				jjmatchedPos = 4;
			} else if ((active1 & 0x80000000000L) != 0L) {
				jjmatchedKind = 107;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0x200000000000000L, active2, 0x2000040000300402L, active3, 0x1c000L);
		case 71:
		case 103:
			if ((active1 & 0x10000000000L) != 0L) {
				jjmatchedKind = 104;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x8000000000000004L, active3, 0L);
		case 72:
		case 104:
			if ((active0 & 0x40000000000L) != 0L) {
				jjmatchedKind = 42;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0x8008000000000000L, active2, 0x4000010109020010L, active3, 0x4L);
		case 75:
		case 107:
			if ((active1 & 0x8000000000L) != 0L) {
				jjmatchedKind = 103;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000000000L, active2, 0L, active3, 0L);
		case 76:
		case 108:
			return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L, active2, 0x100000000002000L, active3, 0x2L);
		case 77:
		case 109:
			return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0x1040000000000000L, active2, 0x1000000000000000L, active3, 0L);
		case 78:
		case 110:
			if ((active1 & 0x20000000000L) != 0L) {
				jjmatchedKind = 105;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000000000L, active2, 0x280088000000000L, active3, 0L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0x4800000000000L, active2, 0x2000000L, active3, 0L);
		case 80:
		case 112:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x11000000000000L, active2, 0x1000004000L, active3, 0L);
		case 82:
		case 114:
			if ((active0 & 0x1000000L) != 0L) {
				jjmatchedKind = 24;
				jjmatchedPos = 4;
			} else if ((active0 & 0x200000000000L) != 0L) {
				jjmatchedKind = 45;
				jjmatchedPos = 4;
			} else if ((active1 & 0x400000L) != 0L) {
				jjmatchedKind = 86;
				jjmatchedPos = 4;
			} else if ((active1 & 0x800000000L) != 0L) {
				jjmatchedKind = 99;
				jjmatchedPos = 4;
			} else if ((active1 & 0x4000000000L) != 0L) {
				jjmatchedKind = 102;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x1000820000000L, active1, 0x2020300000000000L, active2, 0xc00000064018801L, active3, 0L);
		case 83:
		case 115:
			if ((active1 & 0x2000000000L) != 0L) {
				jjmatchedKind = 101;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x88L);
		case 84:
		case 116:
			if ((active0 & 0x80000000000L) != 0L) {
				jjmatchedKind = 43;
				jjmatchedPos = 4;
			} else if ((active1 & 0x800000L) != 0L) {
				jjmatchedKind = 87;
				jjmatchedPos = 4;
			} else if ((active1 & 0x1000000L) != 0L) {
				jjmatchedKind = 88;
				jjmatchedPos = 4;
			} else if ((active1 & 0x100000000L) != 0L) {
				jjmatchedKind = 96;
				jjmatchedPos = 4;
			} else if ((active1 & 0x400000000L) != 0L) {
				jjmatchedKind = 98;
				jjmatchedPos = 4;
			} else if ((active1 & 0x40000000000L) != 0L) {
				jjmatchedKind = 106;
				jjmatchedPos = 4;
			} else if ((active2 & 0x40000000000000L) != 0L) {
				jjmatchedKind = 182;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x1c000000L, active1, 0x80000000000000L, active2, 0x20010000200L, active3, 0L);
		case 85:
		case 117:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4800000000000000L, active2, 0x80028L, active3, 0L);
		case 86:
		case 118:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x60L);
		case 87:
		case 119:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x1000L, active3, 0L);
		case 88:
		case 120:
			if ((active1 & 0x1000000000L) != 0L) {
				jjmatchedKind = 100;
				jjmatchedPos = 4;
			} else if ((active3 & 0x40000L) != 0L) {
				jjmatchedKind = 210;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0xc00000000L, active3, 0L);
		default:
			break;
		}
		return jjMoveNfa_0(5, 4);
	}

	private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3) {
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 4);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 4);
		}
		switch (curChar) {
		case 32:
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x100000c000L, active3, 0L);
		case 95:
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0xc00000000L, active3, 0L);
		case 65:
		case 97:
			if ((active1 & 0x40000000000000L) != 0L) {
				jjmatchedKind = 118;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0L, active2, 0x3000010001080041L, active3, 0xe1L);
		case 67:
		case 99:
			if ((active1 & 0x8000000000000L) != 0L) {
				jjmatchedKind = 115;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0L, active2, 0x40000400000L, active3, 0x300L);
		case 68:
		case 100:
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x108000200000L, active3, 0x2000L);
		case 69:
		case 101:
			if ((active0 & 0x4000000L) != 0L) {
				jjmatchedKind = 26;
				jjmatchedPos = 5;
			} else if ((active0 & 0x8000000L) != 0L) {
				jjmatchedKind = 27;
				jjmatchedPos = 5;
			} else if ((active0 & 0x10000000L) != 0L) {
				jjmatchedKind = 28;
				jjmatchedPos = 5;
			} else if ((active1 & 0x200000000000L) != 0L) {
				jjmatchedKind = 109;
				jjmatchedPos = 5;
			} else if ((active1 & 0x2000000000000L) != 0L) {
				jjmatchedKind = 113;
				jjmatchedPos = 5;
			} else if ((active1 & 0x20000000000000L) != 0L) {
				jjmatchedKind = 117;
				jjmatchedPos = 5;
			} else if ((active1 & 0x800000000000000L) != 0L) {
				jjmatchedKind = 123;
				jjmatchedPos = 5;
			} else if ((active2 & 0x100000000000000L) != 0L) {
				jjmatchedKind = 184;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x8000000040000006L, active3, 0L);
		case 71:
		case 103:
			if ((active1 & 0x400000000000000L) != 0L) {
				jjmatchedKind = 122;
				jjmatchedPos = 5;
			} else if ((active2 & 0x200000000000000L) != 0L) {
				jjmatchedKind = 185;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L);
		case 72:
		case 104:
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000000L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa6_0(active0, 0xd00000000L, active1, 0L, active2, 0x8000a0000802a00L, active3, 0x2L);
		case 75:
		case 107:
			if ((active1 & 0x400000000000L) != 0L) {
				jjmatchedKind = 110;
				jjmatchedPos = 5;
			}
			break;
		case 76:
		case 108:
			if ((active0 & 0x8000000000L) != 0L) {
				jjmatchedKind = 39;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x8000188L, active3, 0x1000L);
		case 77:
		case 109:
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L);
		case 78:
		case 110:
			if ((active1 & 0x100000000000L) != 0L) {
				jjmatchedKind = 108;
				jjmatchedPos = 5;
			} else if ((active1 & 0x800000000000L) != 0L) {
				jjmatchedKind = 111;
				jjmatchedPos = 5;
			} else if ((active1 & 0x4000000000000L) != 0L) {
				jjmatchedKind = 114;
				jjmatchedPos = 5;
			} else if ((active1 & 0x1000000000000000L) != 0L) {
				jjmatchedKind = 124;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xe000000000000000L, active2, 0x4000000000020410L, active3, 0x1c004L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L, active2, 0x1000L, active3, 0x10L);
		case 82:
		case 114:
			if ((active0 & 0x10000000000L) != 0L) {
				jjmatchedKind = 40;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0x1006000000000L, active1, 0L, active2, 0x40b2010000L, active3, 0x80000000000L);
		case 83:
		case 115:
			if ((active1 & 0x1000000000000L) != 0L) {
				jjmatchedKind = 112;
				jjmatchedPos = 5;
			} else if ((active1 & 0x80000000000000L) != 0L) {
				jjmatchedKind = 119;
				jjmatchedPos = 5;
			} else if ((active1 & 0x200000000000000L) != 0L) {
				jjmatchedKind = 121;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x4000000L, active3, 0L);
		case 84:
		case 116:
			if ((active0 & 0x2000000L) != 0L) {
				jjmatchedKind = 25;
				jjmatchedPos = 5;
			} else if ((active0 & 0x20000000L) != 0L) {
				jjmatchedKind = 29;
				jjmatchedPos = 5;
			} else if ((active0 & 0x40000000L) != 0L) {
				jjmatchedKind = 30;
				jjmatchedPos = 5;
			} else if ((active1 & 0x10000000000000L) != 0L) {
				jjmatchedKind = 116;
				jjmatchedPos = 5;
			} else if ((active2 & 0x80000000000000L) != 0L) {
				jjmatchedKind = 183;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2000000020L, active3, 0x808L);
		case 85:
		case 117:
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400L);
		case 86:
		case 118:
			return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L, active2, 0L, active3, 0L);
		case 89:
		case 121:
			if ((active2 & 0x400000000000000L) != 0L) {
				jjmatchedKind = 186;
				jjmatchedPos = 5;
			}
			break;
		default:
			break;
		}
		return jjMoveNfa_0(5, 5);
	}

	private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3) {
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 5);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 5);
		}
		switch (curChar) {
		case 65:
		case 97:
			return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8032800000L, active3, 0x80cL);
		case 66:
		case 98:
			return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0L, active2, 0x80000c000L, active3, 0x10L);
		case 67:
		case 99:
			if ((active2 & 0x800000000000000L) != 0L) {
				jjmatchedKind = 187;
				jjmatchedPos = 6;
			}
			return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0L, active2, 0xa0000020c40L, active3, 0x80L);
		case 69:
		case 101:
			if ((active0 & 0x2000000000L) != 0L) {
				jjmatchedKind = 37;
				jjmatchedPos = 6;
			} else if ((active0 & 0x4000000000L) != 0L) {
				jjmatchedKind = 38;
				jjmatchedPos = 6;
			} else if ((active2 & 0x20L) != 0L) {
				jjmatchedKind = 133;
				jjmatchedPos = 6;
			} else if ((active2 & 0x2000000000L) != 0L) {
				jjmatchedKind = 165;
				jjmatchedPos = 6;
			} else if ((active3 & 0x2000L) != 0L) {
				jjmatchedKind = 205;
				jjmatchedPos = 6;
			}
			return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0L, active2, 0x10000c110000L, active3, 0x80000000000L);
		case 71:
		case 103:
			if ((active1 & 0x8000000000000000L) != 0L) {
				jjmatchedKind = 127;
				jjmatchedPos = 6;
			} else if ((active2 & 0x10L) != 0L) {
				jjmatchedKind = 132;
				jjmatchedPos = 6;
			}
			return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x80000L, active3, 0L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000L);
		case 76:
		case 108:
			if ((active2 & 0x1L) != 0L) {
				jjmatchedKind = 128;
				jjmatchedPos = 6;
			} else if ((active2 & 0x1000000000000000L) != 0L) {
				jjmatchedKind = 188;
				jjmatchedPos = 6;
			}
			return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0L);
		case 77:
		case 109:
			return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1000000000L, active3, 0L);
		case 78:
		case 110:
			if ((active0 & 0x100000000L) != 0L) {
				jjmatchedKind = 32;
				jjmatchedPos = 6;
			} else if ((active2 & 0x2L) != 0L) {
				jjmatchedKind = 129;
				jjmatchedPos = 6;
			} else if ((active2 & 0x100000000L) != 0L) {
				jjmatchedKind = 160;
				jjmatchedPos = 6;
			} else if ((active2 & 0x2000000000000000L) != 0L) {
				jjmatchedKind = 189;
				jjmatchedPos = 6;
			}
			return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x440002000L, active3, 0x402L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L, active1, 0L, active2, 0x40000000200L, active3, 0x40000000300L);
		case 82:
		case 114:
			if ((active2 & 0x4L) != 0L) {
				jjmatchedKind = 130;
				jjmatchedPos = 6;
			} else if ((active2 & 0x8000000000000000L) != 0L) {
				jjmatchedKind = 191;
				jjmatchedPos = 6;
			} else if ((active3 & 0x1L) != 0L) {
				jjmatchedKind = 192;
				jjmatchedPos = 6;
			}
			return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10000001000L, active3, 0x60L);
		case 83:
		case 115:
			if ((active1 & 0x2000000000000000L) != 0L) {
				jjmatchedKind = 125;
				jjmatchedPos = 6;
			}
			break;
		case 84:
		case 116:
			if ((active0 & 0x80000000L) != 0L) {
				jjmatchedKind = 31;
				jjmatchedPos = 6;
			} else if ((active1 & 0x4000000000000000L) != 0L) {
				jjmatchedKind = 126;
				jjmatchedPos = 6;
			} else if ((active2 & 0x8L) != 0L) {
				jjmatchedKind = 131;
				jjmatchedPos = 6;
			} else if ((active2 & 0x4000000000000000L) != 0L) {
				jjmatchedKind = 190;
				jjmatchedPos = 6;
			}
			return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x400000L, active3, 0x1c000L);
		case 85:
		case 117:
			return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x200180L, active3, 0L);
		case 87:
		case 119:
			return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L, active2, 0L, active3, 0L);
		case 89:
		case 121:
			if ((active2 & 0x80000000L) != 0L) {
				jjmatchedKind = 159;
				jjmatchedPos = 6;
			}
			return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4000000000L, active3, 0L);
		case 90:
		case 122:
			return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0L, active2, 0L, active3, 0L);
		default:
			break;
		}
		return jjMoveNfa_0(5, 6);
	}

	private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3) {
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 6);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 6);
		}
		switch (curChar) {
		case 95:
			return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0x4000000000L, active3, 0x1c000L);
		case 65:
		case 97:
			return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0xa1000000000L, active3, 0L);
		case 66:
		case 98:
			return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0x20000000L, active3, 0x840L);
		case 67:
		case 99:
			return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0x100044000000L, active3, 0x420L);
		case 68:
		case 100:
			if ((active2 & 0x1000L) != 0L) {
				jjmatchedKind = 140;
				jjmatchedPos = 7;
			} else if ((active2 & 0x10000L) != 0L) {
				jjmatchedKind = 144;
				jjmatchedPos = 7;
			}
			break;
		case 69:
		case 101:
			if ((active0 & 0x400000000L) != 0L) {
				jjmatchedKind = 34;
				jjmatchedPos = 7;
			} else if ((active0 & 0x800000000L) != 0L) {
				jjmatchedKind = 35;
				jjmatchedPos = 7;
			} else if ((active2 & 0x80L) != 0L) {
				jjmatchedKind = 135;
				jjmatchedPos = 7;
			} else if ((active2 & 0x100L) != 0L) {
				jjmatchedKind = 136;
				jjmatchedPos = 7;
			} else if ((active2 & 0x400L) != 0L) {
				jjmatchedKind = 138;
				jjmatchedPos = 7;
			} else if ((active2 & 0x80000L) != 0L) {
				jjmatchedKind = 147;
				jjmatchedPos = 7;
			}
			return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0x400000L, active3, 0L);
		case 71:
		case 103:
			if ((active2 & 0x2000L) != 0L) {
				jjmatchedKind = 141;
				jjmatchedPos = 7;
			}
			return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0x8000000L, active3, 0L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0x10000000L, active3, 0L);
		case 74:
		case 106:
			return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0L, active3, 0x10L);
		case 75:
		case 107:
			if ((active0 & 0x200000000L) != 0L) {
				jjmatchedKind = 33;
				jjmatchedPos = 7;
			} else if ((active2 & 0x40L) != 0L) {
				jjmatchedKind = 134;
				jjmatchedPos = 7;
			}
			break;
		case 76:
		case 108:
			return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0x801000000L, active3, 0x40000000000L);
		case 77:
		case 109:
			return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0x40000000000L, active3, 0x308L);
		case 78:
		case 110:
			if ((active0 & 0x1000000000L) != 0L) {
				jjmatchedKind = 36;
				jjmatchedPos = 7;
			} else if ((active2 & 0x200L) != 0L) {
				jjmatchedKind = 137;
				jjmatchedPos = 7;
			}
			return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0x100000L, active3, 0L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0x400000000L, active3, 0L);
		case 82:
		case 114:
			if ((active0 & 0x800000000000L) != 0L) {
				jjmatchedKind = 47;
				jjmatchedPos = 7;
			} else if ((active0 & 0x1000000000000L) != 0L) {
				jjmatchedKind = 48;
				jjmatchedPos = 7;
			}
			return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0x8002200000L, active3, 0x4L);
		case 84:
		case 116:
			if ((active2 & 0x800L) != 0L) {
				jjmatchedKind = 139;
				jjmatchedPos = 7;
			} else if ((active2 & 0x20000L) != 0L) {
				jjmatchedKind = 145;
				jjmatchedPos = 7;
			} else if ((active3 & 0x2L) != 0L) {
				jjmatchedKind = 193;
				jjmatchedPos = 7;
			}
			return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0x800000L, active3, 0x80000000080L);
		case 89:
		case 121:
			if ((active2 & 0x4000L) != 0L) {
				jjmatchedKind = 142;
				jjmatchedPos = 7;
			} else if ((active2 & 0x8000L) != 0L) {
				jjmatchedKind = 143;
				jjmatchedPos = 7;
			}
			return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0x10000000000L, active3, 0L);
		case 90:
		case 122:
			return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0L, active3, 0x1000L);
		default:
			break;
		}
		return jjMoveNfa_0(5, 7);
	}

	private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old2, long active2, long old3, long active3) {
		if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 7);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 7);
		}
		switch (curChar) {
		case 95:
			return jjMoveStringLiteralDfa9_0(active2, 0x10000000000L, active3, 0L);
		case 65:
		case 97:
			return jjMoveStringLiteralDfa9_0(active2, 0L, active3, 0x1000L);
		case 68:
		case 100:
			if ((active3 & 0x40000000000L) != 0L) {
				jjmatchedKind = 234;
				jjmatchedPos = 8;
			}
			return jjMoveStringLiteralDfa9_0(active2, 0L, active3, 0x8000L);
		case 69:
		case 101:
			if ((active2 & 0x200000L) != 0L) {
				jjmatchedKind = 149;
				jjmatchedPos = 8;
			} else if ((active2 & 0x800000L) != 0L) {
				jjmatchedKind = 151;
				jjmatchedPos = 8;
			}
			return jjMoveStringLiteralDfa9_0(active2, 0x48000000L, active3, 0x10L);
		case 72:
		case 104:
			return jjMoveStringLiteralDfa9_0(active2, 0L, active3, 0x20L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa9_0(active2, 0x800000000L, active3, 0xc0L);
		case 76:
		case 108:
			return jjMoveStringLiteralDfa9_0(active2, 0xa0020000000L, active3, 0x800L);
		case 77:
		case 109:
			return jjMoveStringLiteralDfa9_0(active2, 0L, active3, 0x300L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa9_0(active2, 0x410000000L, active3, 0L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa9_0(active2, 0x100000000000L, active3, 0x400L);
		case 80:
		case 112:
			if ((active3 & 0x8L) != 0L) {
				jjmatchedKind = 195;
				jjmatchedPos = 8;
			}
			return jjMoveStringLiteralDfa9_0(active2, 0x40000000000L, active3, 0L);
		case 82:
		case 114:
			if ((active2 & 0x400000L) != 0L) {
				jjmatchedKind = 150;
				jjmatchedPos = 8;
			}
			break;
		case 83:
		case 115:
			return jjMoveStringLiteralDfa9_0(active2, 0x4000000000L, active3, 0L);
		case 84:
		case 116:
			if ((active2 & 0x100000L) != 0L) {
				jjmatchedKind = 148;
				jjmatchedPos = 8;
			} else if ((active2 & 0x4000000L) != 0L) {
				jjmatchedKind = 154;
				jjmatchedPos = 8;
			}
			return jjMoveStringLiteralDfa9_0(active2, 0L, active3, 0x14000L);
		case 85:
		case 117:
			return jjMoveStringLiteralDfa9_0(active2, 0L, active3, 0x80000000000L);
		case 88:
		case 120:
			if ((active2 & 0x1000000000L) != 0L) {
				jjmatchedKind = 164;
				jjmatchedPos = 8;
			}
			break;
		case 89:
		case 121:
			if ((active2 & 0x1000000L) != 0L) {
				jjmatchedKind = 152;
				jjmatchedPos = 8;
			} else if ((active2 & 0x2000000L) != 0L) {
				jjmatchedKind = 153;
				jjmatchedPos = 8;
			} else if ((active3 & 0x4L) != 0L) {
				jjmatchedKind = 194;
				jjmatchedPos = 8;
			}
			return jjMoveStringLiteralDfa9_0(active2, 0x8000000000L, active3, 0L);
		default:
			break;
		}
		return jjMoveNfa_0(5, 8);
	}

	private final int jjMoveStringLiteralDfa9_0(long old2, long active2, long old3, long active3) {
		if (((active2 &= old2) | (active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 8);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 8);
		}
		switch (curChar) {
		case 95:
			return jjMoveStringLiteralDfa10_0(active2, 0xa8000000000L, active3, 0L);
		case 65:
		case 97:
			return jjMoveStringLiteralDfa10_0(active2, 0L, active3, 0x8020L);
		case 66:
		case 98:
			return jjMoveStringLiteralDfa10_0(active2, 0L, active3, 0x1000L);
		case 67:
		case 99:
			return jjMoveStringLiteralDfa10_0(active2, 0L, active3, 0x10L);
		case 69:
		case 101:
			if ((active2 & 0x20000000L) != 0L) {
				jjmatchedKind = 157;
				jjmatchedPos = 9;
			} else if ((active2 & 0x400000000L) != 0L) {
				jjmatchedKind = 162;
				jjmatchedPos = 9;
			}
			return jjMoveStringLiteralDfa10_0(active2, 0L, active3, 0x800L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa10_0(active2, 0L, active3, 0x14300L);
		case 77:
		case 109:
			return jjMoveStringLiteralDfa10_0(active2, 0x100000000000L, active3, 0x400L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa10_0(active2, 0L, active3, 0x40L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa10_0(active2, 0x40000000000L, active3, 0x80L);
		case 82:
		case 114:
			return jjMoveStringLiteralDfa10_0(active2, 0L, active3, 0x80000000000L);
		case 83:
		case 115:
			if ((active2 & 0x8000000L) != 0L) {
				jjmatchedKind = 155;
				jjmatchedPos = 9;
			} else if ((active2 & 0x40000000L) != 0L) {
				jjmatchedKind = 158;
				jjmatchedPos = 9;
			}
			return jjMoveStringLiteralDfa10_0(active2, 0x10800000000L, active3, 0L);
		case 84:
		case 116:
			if ((active2 & 0x10000000L) != 0L) {
				jjmatchedKind = 156;
				jjmatchedPos = 9;
			}
			return jjMoveStringLiteralDfa10_0(active2, 0x4000000000L, active3, 0L);
		default:
			break;
		}
		return jjMoveNfa_0(5, 9);
	}

	private final int jjMoveStringLiteralDfa10_0(long old2, long active2, long old3, long active3) {
		if (((active2 &= old2) | (active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 9);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 9);
		}
		switch (curChar) {
		case 32:
			return jjMoveStringLiteralDfa11_0(active2, 0L, active3, 0x800L);
		case 65:
		case 97:
			return jjMoveStringLiteralDfa11_0(active2, 0L, active3, 0x40L);
		case 68:
		case 100:
			return jjMoveStringLiteralDfa11_0(active2, 0x80000000000L, active3, 0L);
		case 76:
		case 108:
			return jjMoveStringLiteralDfa11_0(active2, 0L, active3, 0x1000L);
		case 77:
		case 109:
			return jjMoveStringLiteralDfa11_0(active2, 0L, active3, 0x14400L);
		case 78:
		case 110:
			if ((active3 & 0x80000000000L) != 0L) {
				jjmatchedKind = 235;
				jjmatchedPos = 10;
			}
			return jjMoveStringLiteralDfa11_0(active2, 0L, active3, 0x80L);
		case 80:
		case 112:
			return jjMoveStringLiteralDfa11_0(active2, 0x100000000000L, active3, 0L);
		case 82:
		case 114:
			if ((active3 & 0x20L) != 0L) {
				jjmatchedKind = 197;
				jjmatchedPos = 10;
			}
			return jjMoveStringLiteralDfa11_0(active2, 0x4000000000L, active3, 0L);
		case 83:
		case 115:
			return jjMoveStringLiteralDfa11_0(active2, 0x68000000000L, active3, 0L);
		case 84:
		case 116:
			if ((active2 & 0x800000000L) != 0L) {
				jjmatchedKind = 163;
				jjmatchedPos = 10;
			} else if ((active3 & 0x10L) != 0L) {
				jjmatchedKind = 196;
				jjmatchedPos = 10;
			} else if ((active3 & 0x100L) != 0L) {
				jjmatchedKind = 200;
				jjmatchedPos = 10;
			}
			return jjMoveStringLiteralDfa11_0(active2, 0x10000000000L, active3, 0x8200L);
		default:
			break;
		}
		return jjMoveNfa_0(5, 10);
	}

	private final int jjMoveStringLiteralDfa11_0(long old2, long active2, long old3, long active3) {
		if (((active2 &= old2) | (active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 10);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 10);
		}
		switch (curChar) {
		case 32:
			return jjMoveStringLiteralDfa12_0(active2, 0L, active3, 0x80L);
		case 69:
		case 101:
			if ((active3 & 0x1000L) != 0L) {
				jjmatchedKind = 204;
				jjmatchedPos = 11;
			} else if ((active3 & 0x4000L) != 0L) {
				jjmatchedKind = 206;
				jjmatchedPos = 11;
			} else if ((active3 & 0x8000L) != 0L) {
				jjmatchedKind = 207;
				jjmatchedPos = 11;
			}
			return jjMoveStringLiteralDfa12_0(active2, 0x84000000000L, active3, 0x10000L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa12_0(active2, 0x40000000000L, active3, 0x400L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa12_0(active2, 0x100000000000L, active3, 0L);
		case 82:
		case 114:
			return jjMoveStringLiteralDfa12_0(active2, 0x10000000000L, active3, 0x840L);
		case 84:
		case 116:
			return jjMoveStringLiteralDfa12_0(active2, 0x28000000000L, active3, 0x200L);
		default:
			break;
		}
		return jjMoveNfa_0(5, 11);
	}

	private final int jjMoveStringLiteralDfa12_0(long old2, long active2, long old3, long active3) {
		if (((active2 &= old2) | (active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 11);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 11);
		}
		switch (curChar) {
		case 67:
		case 99:
			return jjMoveStringLiteralDfa13_0(active2, 0x80000000000L, active3, 0L);
		case 69:
		case 101:
			return jjMoveStringLiteralDfa13_0(active2, 0x10000000000L, active3, 0xa00L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa13_0(active2, 0L, active3, 0x80L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa13_0(active2, 0x4000000000L, active3, 0L);
		case 82:
		case 114:
			return jjMoveStringLiteralDfa13_0(active2, 0x28000000000L, active3, 0L);
		case 83:
		case 115:
			return jjMoveStringLiteralDfa13_0(active2, 0x100000000000L, active3, 0x10000L);
		case 84:
		case 116:
			return jjMoveStringLiteralDfa13_0(active2, 0x40000000000L, active3, 0x400L);
		case 89:
		case 121:
			if ((active3 & 0x40L) != 0L) {
				jjmatchedKind = 198;
				jjmatchedPos = 12;
			}
			break;
		default:
			break;
		}
		return jjMoveNfa_0(5, 12);
	}

	private final int jjMoveStringLiteralDfa13_0(long old2, long active2, long old3, long active3) {
		if (((active2 &= old2) | (active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 12);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 12);
		}
		switch (curChar) {
		case 65:
		case 97:
			return jjMoveStringLiteralDfa14_0(active2, 0L, active3, 0x800L);
		case 68:
		case 100:
			if ((active3 & 0x200L) != 0L) {
				jjmatchedKind = 201;
				jjmatchedPos = 13;
			}
			break;
		case 69:
		case 101:
			return jjMoveStringLiteralDfa14_0(active2, 0x28000000000L, active3, 0L);
		case 71:
		case 103:
			return jjMoveStringLiteralDfa14_0(active2, 0x4000000000L, active3, 0L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa14_0(active2, 0x140000000000L, active3, 0L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa14_0(active2, 0x10000000000L, active3, 0L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa14_0(active2, 0x80000000000L, active3, 0L);
		case 83:
		case 115:
			return jjMoveStringLiteralDfa14_0(active2, 0L, active3, 0x80L);
		case 84:
		case 116:
			return jjMoveStringLiteralDfa14_0(active2, 0L, active3, 0x10400L);
		default:
			break;
		}
		return jjMoveNfa_0(5, 13);
	}

	private final int jjMoveStringLiteralDfa14_0(long old2, long active2, long old3, long active3) {
		if (((active2 &= old2) | (active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 13);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 13);
		}
		switch (curChar) {
		case 65:
		case 97:
			return jjMoveStringLiteralDfa15_0(active2, 0L, active3, 0x10000L);
		case 68:
		case 100:
			if ((active3 & 0x800L) != 0L) {
				jjmatchedKind = 203;
				jjmatchedPos = 14;
			}
			break;
		case 69:
		case 101:
			return jjMoveStringLiteralDfa15_0(active2, 0L, active3, 0x400L);
		case 71:
		case 103:
			return jjMoveStringLiteralDfa15_0(active2, 0x10000000000L, active3, 0L);
		case 77:
		case 109:
			return jjMoveStringLiteralDfa15_0(active2, 0x80000000000L, active3, 0L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa15_0(active2, 0x28000000000L, active3, 0L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa15_0(active2, 0x40000000000L, active3, 0x80L);
		case 84:
		case 116:
			return jjMoveStringLiteralDfa15_0(active2, 0x104000000000L, active3, 0L);
		default:
			break;
		}
		return jjMoveNfa_0(5, 14);
	}

	private final int jjMoveStringLiteralDfa15_0(long old2, long active2, long old3, long active3) {
		if (((active2 &= old2) | (active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 14);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 14);
		}
		switch (curChar) {
		case 68:
		case 100:
			if ((active3 & 0x400L) != 0L) {
				jjmatchedKind = 202;
				jjmatchedPos = 15;
			}
			break;
		case 71:
		case 103:
			return jjMoveStringLiteralDfa16_0(active2, 0x28000000000L, active3, 0L);
		case 72:
		case 104:
			if ((active2 & 0x4000000000L) != 0L) {
				jjmatchedKind = 166;
				jjmatchedPos = 15;
			}
			break;
		case 73:
		case 105:
			return jjMoveStringLiteralDfa16_0(active2, 0x100000000000L, active3, 0L);
		case 76:
		case 108:
			return jjMoveStringLiteralDfa16_0(active2, 0L, active3, 0x80L);
		case 77:
		case 109:
			return jjMoveStringLiteralDfa16_0(active2, 0L, active3, 0x10000L);
		case 78:
		case 110:
			if ((active2 & 0x40000000000L) != 0L) {
				jjmatchedKind = 170;
				jjmatchedPos = 15;
			}
			break;
		case 80:
		case 112:
			return jjMoveStringLiteralDfa16_0(active2, 0x80000000000L, active3, 0L);
		case 84:
		case 116:
			return jjMoveStringLiteralDfa16_0(active2, 0x10000000000L, active3, 0L);
		default:
			break;
		}
		return jjMoveNfa_0(5, 15);
	}

	private final int jjMoveStringLiteralDfa16_0(long old2, long active2, long old3, long active3) {
		if (((active2 &= old2) | (active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 15);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 15);
		}
		switch (curChar) {
		case 65:
		case 97:
			return jjMoveStringLiteralDfa17_0(active2, 0L, active3, 0x80L);
		case 72:
		case 104:
			if ((active2 & 0x10000000000L) != 0L) {
				jjmatchedKind = 168;
				jjmatchedPos = 16;
			}
			break;
		case 79:
		case 111:
			return jjMoveStringLiteralDfa17_0(active2, 0x180000000000L, active3, 0L);
		case 80:
		case 112:
			if ((active3 & 0x10000L) != 0L) {
				jjmatchedKind = 208;
				jjmatchedPos = 16;
			}
			break;
		case 84:
		case 116:
			return jjMoveStringLiteralDfa17_0(active2, 0x28000000000L, active3, 0L);
		default:
			break;
		}
		return jjMoveNfa_0(5, 16);
	}

	private final int jjMoveStringLiteralDfa17_0(long old2, long active2, long old3, long active3) {
		if (((active2 &= old2) | (active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 16);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 16);
		}
		switch (curChar) {
		case 72:
		case 104:
			if ((active2 & 0x8000000000L) != 0L) {
				jjmatchedKind = 167;
				jjmatchedPos = 17;
			} else if ((active2 & 0x20000000000L) != 0L) {
				jjmatchedKind = 169;
				jjmatchedPos = 17;
			}
			break;
		case 78:
		case 110:
			if ((active2 & 0x100000000000L) != 0L) {
				jjmatchedKind = 172;
				jjmatchedPos = 17;
			}
			break;
		case 83:
		case 115:
			return jjMoveStringLiteralDfa18_0(active2, 0x80000000000L, active3, 0L);
		case 84:
		case 116:
			return jjMoveStringLiteralDfa18_0(active2, 0L, active3, 0x80L);
		default:
			break;
		}
		return jjMoveNfa_0(5, 17);
	}

	private final int jjMoveStringLiteralDfa18_0(long old2, long active2, long old3, long active3) {
		if (((active2 &= old2) | (active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 17);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 17);
		}
		switch (curChar) {
		case 73:
		case 105:
			return jjMoveStringLiteralDfa19_0(active2, 0x80000000000L, active3, 0x80L);
		default:
			break;
		}
		return jjMoveNfa_0(5, 18);
	}

	private final int jjMoveStringLiteralDfa19_0(long old2, long active2, long old3, long active3) {
		if (((active2 &= old2) | (active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 18);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 18);
		}
		switch (curChar) {
		case 79:
		case 111:
			return jjMoveStringLiteralDfa20_0(active2, 0L, active3, 0x80L);
		case 84:
		case 116:
			return jjMoveStringLiteralDfa20_0(active2, 0x80000000000L, active3, 0L);
		default:
			break;
		}
		return jjMoveNfa_0(5, 19);
	}

	private final int jjMoveStringLiteralDfa20_0(long old2, long active2, long old3, long active3) {
		if (((active2 &= old2) | (active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 19);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 19);
		}
		switch (curChar) {
		case 73:
		case 105:
			return jjMoveStringLiteralDfa21_0(active2, 0x80000000000L, active3, 0L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa21_0(active2, 0L, active3, 0x80L);
		default:
			break;
		}
		return jjMoveNfa_0(5, 20);
	}

	private final int jjMoveStringLiteralDfa21_0(long old2, long active2, long old3, long active3) {
		if (((active2 &= old2) | (active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 20);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 20);
		}
		switch (curChar) {
		case 32:
			return jjMoveStringLiteralDfa22_0(active2, 0L, active3, 0x80L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa22_0(active2, 0x80000000000L, active3, 0L);
		default:
			break;
		}
		return jjMoveNfa_0(5, 21);
	}

	private final int jjMoveStringLiteralDfa22_0(long old2, long active2, long old3, long active3) {
		if (((active2 &= old2) | (active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 21);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 21);
		}
		switch (curChar) {
		case 76:
		case 108:
			return jjMoveStringLiteralDfa23_0(active2, 0L, active3, 0x80L);
		case 78:
		case 110:
			if ((active2 & 0x80000000000L) != 0L) {
				jjmatchedKind = 171;
				jjmatchedPos = 22;
			}
			break;
		default:
			break;
		}
		return jjMoveNfa_0(5, 22);
	}

	private final int jjMoveStringLiteralDfa23_0(long old2, long active2, long old3, long active3) {
		if (((active2 &= old2) | (active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 22);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 22);
		}
		switch (curChar) {
		case 69:
		case 101:
			return jjMoveStringLiteralDfa24_0(active3, 0x80L);
		default:
			break;
		}
		return jjMoveNfa_0(5, 23);
	}

	private final int jjMoveStringLiteralDfa24_0(long old3, long active3) {
		if (((active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 23);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 23);
		}
		switch (curChar) {
		case 86:
		case 118:
			return jjMoveStringLiteralDfa25_0(active3, 0x80L);
		default:
			break;
		}
		return jjMoveNfa_0(5, 24);
	}

	private final int jjMoveStringLiteralDfa25_0(long old3, long active3) {
		if (((active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 24);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 24);
		}
		switch (curChar) {
		case 69:
		case 101:
			return jjMoveStringLiteralDfa26_0(active3, 0x80L);
		default:
			break;
		}
		return jjMoveNfa_0(5, 25);
	}

	private final int jjMoveStringLiteralDfa26_0(long old3, long active3) {
		if (((active3 &= old3)) == 0L)
			return jjMoveNfa_0(5, 25);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(5, 25);
		}
		switch (curChar) {
		case 76:
		case 108:
			if ((active3 & 0x80L) != 0L) {
				jjmatchedKind = 199;
				jjmatchedPos = 26;
			}
			break;
		default:
			break;
		}
		return jjMoveNfa_0(5, 26);
	}

	private final void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	private final void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	private final void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	private final void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}

	private final void jjCheckNAddStates(int start) {
		jjCheckNAdd(jjnextStates[start]);
		jjCheckNAdd(jjnextStates[start + 1]);
	}

	static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };
	static final long[] jjbitVec1 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0x7f7fffffffffffffL };
	static final long[] jjbitVec2 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0x7f7fffff007fffffL };
	static final long[] jjbitVec3 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0x7f7fffff7f7fffffL };

	private final int jjMoveNfa_0(int startState, int curPos) {
		int strKind = jjmatchedKind;
		int strPos = jjmatchedPos;
		int seenUpto;
		input_stream.backup(seenUpto = curPos + 1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			throw new Error("Internal Error");
		}
		curPos = 0;
		int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 134;
		int i = 1;
		jjstateSet[0] = startState;
		int j, kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 5:
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 217)
								kind = 217;
							jjCheckNAddStates(0, 2);
						} else if (curChar == 34)
							jjCheckNAddStates(3, 10);
						else if (curChar == 58)
							jjstateSet[jjnewStateCnt++] = 64;
						else if (curChar == 39)
							jjCheckNAddStates(11, 14);
						else if (curChar == 46)
							jjCheckNAdd(55);
						else if (curChar == 60)
							jjstateSet[jjnewStateCnt++] = 14;
						else if (curChar == 33)
							jjstateSet[jjnewStateCnt++] = 12;
						else if (curChar == 45)
							jjstateSet[jjnewStateCnt++] = 6;
						else if (curChar == 47)
							jjstateSet[jjnewStateCnt++] = 0;
						break;
					case 0:
						if (curChar == 47)
							jjCheckNAddStates(15, 17);
						break;
					case 1:
						if ((0xffffffffffffdbffL & l) != 0L)
							jjCheckNAddStates(15, 17);
						break;
					case 2:
						if ((0x2400L & l) != 0L && kind > 5)
							kind = 5;
						break;
					case 3:
						if (curChar == 10 && kind > 5)
							kind = 5;
						break;
					case 4:
						if (curChar == 13)
							jjstateSet[jjnewStateCnt++] = 3;
						break;
					case 6:
						if (curChar == 45)
							jjCheckNAddStates(18, 20);
						break;
					case 7:
						if ((0xffffffffffffdbffL & l) != 0L)
							jjCheckNAddStates(18, 20);
						break;
					case 8:
						if ((0x2400L & l) != 0L && kind > 6)
							kind = 6;
						break;
					case 9:
						if (curChar == 10 && kind > 6)
							kind = 6;
						break;
					case 10:
						if (curChar == 13)
							jjstateSet[jjnewStateCnt++] = 9;
						break;
					case 11:
						if (curChar == 45)
							jjstateSet[jjnewStateCnt++] = 6;
						break;
					case 12:
						if (curChar == 61 && kind > 14)
							kind = 14;
						break;
					case 13:
						if (curChar == 33)
							jjstateSet[jjnewStateCnt++] = 12;
						break;
					case 14:
						if (curChar == 62 && kind > 14)
							kind = 14;
						break;
					case 15:
						if (curChar == 60)
							jjstateSet[jjnewStateCnt++] = 14;
						break;
					case 20:
						if (curChar == 47)
							jjCheckNAddStates(21, 23);
						break;
					case 21:
						if ((0xffff7fffffffdbffL & l) != 0L)
							jjCheckNAddStates(21, 23);
						break;
					case 23:
						if (curChar != 47)
							break;
						if (kind > 21)
							kind = 21;
						jjstateSet[jjnewStateCnt++] = 24;
						break;
					case 25:
						if (curChar == 32)
							jjstateSet[jjnewStateCnt++] = 20;
						break;
					case 32:
						if (curChar == 32)
							jjAddStates(24, 25);
						break;
					case 42:
						if (curChar == 32)
							jjAddStates(26, 27);
						break;
					case 48:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 217)
							kind = 217;
						jjCheckNAddStates(0, 2);
						break;
					case 49:
						if (curChar == 46)
							jjCheckNAdd(50);
						break;
					case 50:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 217)
							kind = 217;
						jjCheckNAddTwoStates(50, 51);
						break;
					case 52:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(53);
						break;
					case 53:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 217)
							kind = 217;
						jjCheckNAdd(53);
						break;
					case 54:
						if (curChar == 46)
							jjCheckNAdd(55);
						break;
					case 55:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 217)
							kind = 217;
						jjCheckNAddTwoStates(55, 51);
						break;
					case 56:
					case 57:
						if (curChar == 39)
							jjCheckNAddStates(11, 14);
						break;
					case 58:
						if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 57;
						break;
					case 60:
						if ((0xa000000000L & l) != 0L)
							jjCheckNAddStates(11, 14);
						break;
					case 61:
						if ((0xffffff7fffffffffL & l) != 0L)
							jjCheckNAddStates(11, 14);
						break;
					case 62:
						if (curChar == 39 && kind > 218)
							kind = 218;
						break;
					case 63:
						if (curChar == 58)
							jjstateSet[jjnewStateCnt++] = 64;
						break;
					case 65:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 221)
							kind = 221;
						jjstateSet[jjnewStateCnt++] = 65;
						break;
					case 68:
						if ((0x3ff000000000000L & l) != 0L)
							jjAddStates(28, 29);
						break;
					case 75:
						if (curChar == 32)
							jjAddStates(30, 32);
						break;
					case 77:
						if (curChar == 32)
							jjAddStates(33, 34);
						break;
					case 91:
						if (curChar == 34)
							jjCheckNAddStates(3, 10);
						break;
					case 92:
						if ((0xfffffffbffffffffL & l) != 0L)
							jjCheckNAddTwoStates(92, 93);
						break;
					case 93:
						if (curChar == 34 && kind > 219)
							kind = 219;
						break;
					case 94:
						if ((0xfffffffbffffffffL & l) != 0L)
							jjCheckNAddTwoStates(94, 95);
						break;
					case 95:
						if (curChar != 34)
							break;
						if (kind > 224)
							kind = 224;
						jjstateSet[jjnewStateCnt++] = 96;
						break;
					case 96:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 97;
						break;
					case 97:
						if (curChar == 34)
							jjCheckNAddTwoStates(98, 95);
						break;
					case 98:
						if ((0xfffffffbffffffffL & l) != 0L)
							jjCheckNAddTwoStates(98, 95);
						break;
					case 99:
						if ((0xfffffffbffffffffL & l) != 0L)
							jjCheckNAddTwoStates(99, 100);
						break;
					case 100:
						if (curChar != 34)
							break;
						if (kind > 225)
							kind = 225;
						jjstateSet[jjnewStateCnt++] = 101;
						break;
					case 101:
						if (curChar == 47)
							jjstateSet[jjnewStateCnt++] = 102;
						break;
					case 102:
						if (curChar == 34)
							jjCheckNAddTwoStates(103, 100);
						break;
					case 103:
						if ((0xfffffffbffffffffL & l) != 0L)
							jjCheckNAddTwoStates(103, 100);
						break;
					case 104:
						if ((0xfffffffbffffffffL & l) != 0L)
							jjCheckNAddTwoStates(104, 105);
						break;
					case 105:
						if (curChar == 34)
							jjAddStates(35, 36);
						break;
					case 106:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 107;
						break;
					case 107:
						if (curChar == 34)
							jjCheckNAddTwoStates(108, 105);
						break;
					case 108:
						if ((0xfffffffbffffffffL & l) != 0L)
							jjCheckNAddTwoStates(108, 105);
						break;
					case 109:
						if (curChar == 42 && kind > 229)
							kind = 229;
						break;
					case 110:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 109;
						break;
					case 112:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 220)
							kind = 220;
						jjstateSet[jjnewStateCnt++] = 112;
						break;
					case 113:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 222)
							kind = 222;
						jjCheckNAddTwoStates(113, 114);
						break;
					case 114:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 115;
						break;
					case 116:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 222)
							kind = 222;
						jjCheckNAddTwoStates(114, 116);
						break;
					case 117:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 223)
							kind = 223;
						jjCheckNAddTwoStates(117, 118);
						break;
					case 118:
						if (curChar == 47)
							jjstateSet[jjnewStateCnt++] = 119;
						break;
					case 120:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 223)
							kind = 223;
						jjCheckNAddTwoStates(118, 120);
						break;
					case 121:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(37, 39);
						break;
					case 122:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 123;
						break;
					case 124:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(40, 42);
						break;
					case 127:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 227)
							kind = 227;
						jjstateSet[jjnewStateCnt++] = 127;
						break;
					case 128:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(43, 45);
						break;
					case 129:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 130;
						break;
					case 131:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(46, 48);
						break;
					case 132:
						if (curChar == 42 && kind > 228)
							kind = 228;
						break;
					case 133:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 132;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 5:
						if ((0xfffffffffffffffeL & l) != 0L) {
							if (kind > 220)
								kind = 220;
							jjCheckNAddStates(49, 60);
						}
						if ((0x4000000040L & l) != 0L)
							jjAddStates(61, 62);
						else if ((0x80000000800000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 46;
						else if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 39;
						else if ((0x4000000040000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 29;
						else if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 18;
						else if (curChar == 124)
							jjstateSet[jjnewStateCnt++] = 67;
						break;
					case 1:
						jjAddStates(15, 17);
						break;
					case 7:
						jjAddStates(18, 20);
						break;
					case 16:
						if ((0x2000000020L & l) != 0L && kind > 19)
							kind = 19;
						break;
					case 17:
						if ((0x20000000200000L & l) != 0L)
							jjCheckNAdd(16);
						break;
					case 18:
						if ((0x4000000040000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 17;
						break;
					case 19:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 18;
						break;
					case 21:
						jjAddStates(21, 23);
						break;
					case 22:
						if (curChar == 92)
							jjstateSet[jjnewStateCnt++] = 20;
						break;
					case 24:
						if ((0x8220000082200L & l) == 0L)
							break;
						if (kind > 21)
							kind = 21;
						jjstateSet[jjnewStateCnt++] = 24;
						break;
					case 26:
						if ((0x100000001000000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 25;
						break;
					case 27:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 26;
						break;
					case 28:
						if ((0x8000000080L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 27;
						break;
					case 29:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 28;
						break;
					case 30:
						if ((0x4000000040000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 29;
						break;
					case 31:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 32;
						break;
					case 33:
						if ((0x8000000080000L & l) != 0L && kind > 120)
							kind = 120;
						break;
					case 34:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 33;
						break;
					case 35:
						if ((0x8000000080000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 34;
						break;
					case 36:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 35;
						break;
					case 37:
						if ((0x100000001000000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 36;
						break;
					case 38:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 37;
						break;
					case 39:
						if ((0x800000008000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 31;
						break;
					case 40:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 39;
						break;
					case 41:
						if ((0x10000000100L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 42;
						break;
					case 43:
						if ((0x800000008L & l) != 0L && kind > 215)
							kind = 215;
						break;
					case 44:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 43;
						break;
					case 45:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 41;
						break;
					case 46:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 45;
						break;
					case 47:
						if ((0x80000000800000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 46;
						break;
					case 51:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(63, 64);
						break;
					case 59:
						if (curChar == 92)
							jjstateSet[jjnewStateCnt++] = 60;
						break;
					case 60:
						if ((0xfffffffe97fffffeL & l) != 0L)
							jjCheckNAddStates(11, 14);
						break;
					case 61:
						if ((0xffffffffefffffffL & l) != 0L)
							jjCheckNAddStates(11, 14);
						break;
					case 64:
					case 65:
						if ((0xfffffffffffffffeL & l) == 0L)
							break;
						if (kind > 221)
							kind = 221;
						jjCheckNAdd(65);
						break;
					case 66:
						if (curChar == 124)
							jjstateSet[jjnewStateCnt++] = 67;
						break;
					case 67:
					case 68:
						if ((0xfffffffffffffffeL & l) != 0L)
							jjCheckNAddTwoStates(68, 69);
						break;
					case 69:
						if (curChar == 124 && kind > 221)
							kind = 221;
						break;
					case 70:
						if ((0x4000000040L & l) != 0L)
							jjAddStates(61, 62);
						break;
					case 71:
						if ((0x8000000080000L & l) != 0L)
							jjCheckNAdd(16);
						break;
					case 72:
						if ((0x100000001000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 71;
						break;
					case 73:
						if ((0x200000002L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 72;
						break;
					case 74:
						if ((0x4000000040000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 75;
						break;
					case 76:
						if ((0x10000000100L & l) != 0L)
							jjCheckNAdd(77);
						break;
					case 78:
						if ((0x200000002000000L & l) != 0L && kind > 216)
							kind = 216;
						break;
					case 79:
						if ((0x100000001000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 78;
						break;
					case 80:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 79;
						break;
					case 81:
						if ((0x800000008000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 80;
						break;
					case 82:
						if ((0x800000008L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 76;
						break;
					case 83:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 82;
						break;
					case 84:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 83;
						break;
					case 85:
						if ((0x4000000040L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 84;
						break;
					case 86:
						if ((0x1000000010L & l) != 0L)
							jjCheckNAdd(77);
						break;
					case 87:
						if ((0x200000002L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 86;
						break;
					case 88:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 87;
						break;
					case 89:
						if ((0x4000000040000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 88;
						break;
					case 90:
						if ((0x800000008000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 74;
						break;
					case 92:
						jjAddStates(65, 66);
						break;
					case 94:
						jjCheckNAddTwoStates(94, 95);
						break;
					case 98:
						jjCheckNAddTwoStates(98, 95);
						break;
					case 99:
						jjCheckNAddTwoStates(99, 100);
						break;
					case 103:
						jjCheckNAddTwoStates(103, 100);
						break;
					case 104:
						jjCheckNAddTwoStates(104, 105);
						break;
					case 108:
						jjCheckNAddTwoStates(108, 105);
						break;
					case 111:
						if ((0xfffffffffffffffeL & l) == 0L)
							break;
						if (kind > 220)
							kind = 220;
						jjCheckNAddStates(49, 60);
						break;
					case 112:
						if ((0xfffffffffffffffeL & l) == 0L)
							break;
						if (kind > 220)
							kind = 220;
						jjCheckNAdd(112);
						break;
					case 113:
						if ((0xfffffffffffffffeL & l) == 0L)
							break;
						if (kind > 222)
							kind = 222;
						jjCheckNAddTwoStates(113, 114);
						break;
					case 115:
					case 116:
						if ((0xfffffffffffffffeL & l) == 0L)
							break;
						if (kind > 222)
							kind = 222;
						jjCheckNAddTwoStates(114, 116);
						break;
					case 117:
						if ((0xfffffffffffffffeL & l) == 0L)
							break;
						if (kind > 223)
							kind = 223;
						jjCheckNAddTwoStates(117, 118);
						break;
					case 119:
					case 120:
						if ((0xfffffffffffffffeL & l) == 0L)
							break;
						if (kind > 223)
							kind = 223;
						jjCheckNAddTwoStates(118, 120);
						break;
					case 121:
						if ((0xfffffffffffffffeL & l) != 0L)
							jjCheckNAddStates(37, 39);
						break;
					case 123:
					case 124:
						if ((0xfffffffffffffffeL & l) != 0L)
							jjCheckNAddStates(40, 42);
						break;
					case 125:
						if (curChar == 93 && kind > 226)
							kind = 226;
						break;
					case 126:
						if (curChar == 91)
							jjstateSet[jjnewStateCnt++] = 125;
						break;
					case 127:
						if ((0xfffffffffffffffeL & l) == 0L)
							break;
						if (kind > 227)
							kind = 227;
						jjCheckNAdd(127);
						break;
					case 128:
						if ((0xfffffffffffffffeL & l) != 0L)
							jjCheckNAddStates(43, 45);
						break;
					case 130:
					case 131:
						if ((0xfffffffffffffffeL & l) != 0L)
							jjCheckNAddStates(46, 48);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 5:
						if ((jjbitVec2[i2] & l2) == 0L)
							break;
						if (kind > 220)
							kind = 220;
						jjCheckNAddStates(49, 60);
						break;
					case 1:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjAddStates(15, 17);
						break;
					case 7:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjAddStates(18, 20);
						break;
					case 21:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjAddStates(21, 23);
						break;
					case 60:
						if ((jjbitVec1[i2] & l2) != 0L)
							jjCheckNAddStates(11, 14);
						break;
					case 61:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjCheckNAddStates(11, 14);
						break;
					case 64:
						if ((jjbitVec2[i2] & l2) == 0L)
							break;
						if (kind > 221)
							kind = 221;
						jjCheckNAdd(65);
						break;
					case 65:
						if ((jjbitVec3[i2] & l2) == 0L)
							break;
						if (kind > 221)
							kind = 221;
						jjCheckNAdd(65);
						break;
					case 67:
						if ((jjbitVec2[i2] & l2) != 0L)
							jjCheckNAddTwoStates(68, 69);
						break;
					case 68:
						if ((jjbitVec3[i2] & l2) != 0L)
							jjCheckNAddTwoStates(68, 69);
						break;
					case 92:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjAddStates(65, 66);
						break;
					case 94:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjCheckNAddTwoStates(94, 95);
						break;
					case 98:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjCheckNAddTwoStates(98, 95);
						break;
					case 99:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjCheckNAddTwoStates(99, 100);
						break;
					case 103:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjCheckNAddTwoStates(103, 100);
						break;
					case 104:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjCheckNAddTwoStates(104, 105);
						break;
					case 108:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjCheckNAddTwoStates(108, 105);
						break;
					case 112:
						if ((jjbitVec3[i2] & l2) == 0L)
							break;
						if (kind > 220)
							kind = 220;
						jjCheckNAdd(112);
						break;
					case 113:
						if ((jjbitVec3[i2] & l2) == 0L)
							break;
						if (kind > 222)
							kind = 222;
						jjCheckNAddTwoStates(113, 114);
						break;
					case 115:
						if ((jjbitVec2[i2] & l2) == 0L)
							break;
						if (kind > 222)
							kind = 222;
						jjCheckNAddTwoStates(114, 116);
						break;
					case 116:
						if ((jjbitVec3[i2] & l2) == 0L)
							break;
						if (kind > 222)
							kind = 222;
						jjCheckNAddTwoStates(114, 116);
						break;
					case 117:
						if ((jjbitVec3[i2] & l2) == 0L)
							break;
						if (kind > 223)
							kind = 223;
						jjCheckNAddTwoStates(117, 118);
						break;
					case 119:
						if ((jjbitVec2[i2] & l2) == 0L)
							break;
						if (kind > 223)
							kind = 223;
						jjCheckNAddTwoStates(118, 120);
						break;
					case 120:
						if ((jjbitVec3[i2] & l2) == 0L)
							break;
						if (kind > 223)
							kind = 223;
						jjCheckNAddTwoStates(118, 120);
						break;
					case 121:
						if ((jjbitVec3[i2] & l2) != 0L)
							jjCheckNAddStates(37, 39);
						break;
					case 123:
						if ((jjbitVec2[i2] & l2) != 0L)
							jjCheckNAddStates(40, 42);
						break;
					case 124:
						if ((jjbitVec3[i2] & l2) != 0L)
							jjCheckNAddStates(40, 42);
						break;
					case 127:
						if ((jjbitVec3[i2] & l2) == 0L)
							break;
						if (kind > 227)
							kind = 227;
						jjCheckNAdd(127);
						break;
					case 128:
						if ((jjbitVec3[i2] & l2) != 0L)
							jjCheckNAddStates(43, 45);
						break;
					case 130:
						if ((jjbitVec2[i2] & l2) != 0L)
							jjCheckNAddStates(46, 48);
						break;
					case 131:
						if ((jjbitVec3[i2] & l2) != 0L)
							jjCheckNAddStates(46, 48);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 134 - (jjnewStateCnt = startsAt)))
				break;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				break;
			}
		}
		if (jjmatchedPos > strPos)
			return curPos;

		int toRet = Math.max(curPos, seenUpto);

		if (curPos < toRet)
			for (i = toRet - Math.min(curPos, seenUpto); i-- > 0;)
				try {
					curChar = input_stream.readChar();
				} catch (java.io.IOException e) {
					throw new Error("Internal Error : Please send a bug report.");
				}

		if (jjmatchedPos < strPos) {
			jjmatchedKind = strKind;
			jjmatchedPos = strPos;
		} else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
			jjmatchedKind = strKind;

		return toRet;
	}

	static final int[] jjnextStates = { 48, 49, 51, 92, 93, 94, 95, 99, 100, 104, 105, 58, 59, 61, 62, 1, 2, 4, 7, 8, 10, 21, 22, 23, 32, 38, 42, 44, 68, 69, 75, 85, 89, 77, 81, 106, 110, 121, 122, 126, 122, 124, 126, 128, 129, 133, 129, 131, 133, 112, 113, 114, 117, 118, 121, 122, 126, 127, 128,
			129, 133, 73, 90, 52, 53, 92, 93, };
	public static final String[] jjstrLiteralImages = { "", null, null, null, null, null, null, "\52", "\75", "\75\75", "\76", "\74", "\76\75", "\74\75", null, "\57", "\53", "\55", "\174\174", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, "\77", null, null, "\73", null, null, "\54", "\50", "\51", };
	public static final String[] lexStateNames = { "DEFAULT", };
	static final long[] jjtoToken = { 0xffffffffffffff81L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7e7fffffffffL, };
	static final long[] jjtoSkip = { 0x7eL, 0x0L, 0x0L, 0x0L, };
	private SimpleCharStream input_stream;
	private final int[] jjrounds = new int[134];
	private final int[] jjstateSet = new int[268];
	protected char curChar;

	public SQLParserTokenManager(SimpleCharStream stream) {
		if (SimpleCharStream.staticFlag)
			throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
		input_stream = stream;
	}

	public SQLParserTokenManager(SimpleCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	public void ReInit(SimpleCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	private final void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 134; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}

	public void ReInit(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	public void SwitchTo(int lexState) {
		if (lexState >= 1 || lexState < 0)
			throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
		else
			curLexState = lexState;
	}

	private final Token jjFillToken() {
		Token t = Token.newToken(jjmatchedKind);
		t.kind = jjmatchedKind;
		String im = jjstrLiteralImages[jjmatchedKind];
		t.image = (im == null) ? input_stream.GetImage() : im;
		t.beginLine = input_stream.getBeginLine();
		t.beginColumn = input_stream.getBeginColumn();
		t.endLine = input_stream.getEndLine();
		t.endColumn = input_stream.getEndColumn();
		return t;
	}

	int curLexState = 0;
	int defaultLexState = 0;
	int jjnewStateCnt;
	int jjround;
	int jjmatchedPos;
	int jjmatchedKind;

	public final Token getNextToken() {
		int kind;
		Token specialToken = null;
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				return matchedToken;
			}

			jjmatchedKind = 0x7fffffff;
			jjmatchedPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if (jjmatchedKind != 0x7fffffff) {
				if (jjmatchedPos + 1 < curPos)
					input_stream.backup(curPos - jjmatchedPos - 1);
				if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
					matchedToken = jjFillToken();
					return matchedToken;
				} else {
					continue EOFLoop;
				}
			}
			int error_line = input_stream.getEndLine();
			int error_column = input_stream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				input_stream.readChar();
				input_stream.backup(1);
			} catch (java.io.IOException e1) {
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
				if (curChar == '\n' || curChar == '\r') {
					error_line++;
					error_column = 0;
				} else
					error_column++;
			}
			if (!EOFSeen) {
				input_stream.backup(1);
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
		}
	}

}
